<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tilttrain_towards</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = point_direction(x,obj_guide_tilt.x,y,obj_guide_tilt.y)
//audio_play_sound(sf_trainamb,2,true)
sound = false
image_speed = 0.25
good = false
goodCount = 0;
bad = false
badCount = 0;
bad2 = false
badCount2 = 0;
global.stop = false;
draw_set_font(fnt_marker);
message = '';
ogStress = global.stress
if instance_exists(obj_bar_stress)
{
    ogPos = obj_bar_stress.y;
}
if instance_exists(obj_bar_stress)
{
    with obj_bar_stress { y = 851}
    with obj_bar_top { y = 851}
    with obj_bar_inner2 { y = 851}
}
animstart = 0

  ogw =   view_wview[0] 
  ogh = view_hview[0] 
    
  ogx =  view_xview[0]
  ogy = view_yview[0]

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//spawn swipe
 
 if !instance_exists(obj_swipe)
 {
    instance_create(room_width,0,obj_swipe)
    with obj_bar_stress { y = obj_player_tilt.ogPos}
    with obj_bar_top { y = obj_player_tilt.ogPos}
    with obj_bar_inner2 { y = obj_player_tilt.ogPos}
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.stop == false//game is still running, player has not gotten too close or two far from friend
{
image_angle = point_direction(x,y,obj_guide_tilt.x,obj_guide_tilt.y)
// what range is the player in?
if place_meeting(x,y,obj_trainfriend_mask) &amp;&amp; !place_meeting(x,y,obj_trainfriend) &amp;&amp; !place_meeting(x,y,obj_tiltrain_negmask) or place_meeting(x,y,obj_trainfriend_mask2) &amp;&amp; !place_meeting(x,y,obj_trainfriend2) &amp;&amp; !place_meeting(x,y,obj_tiltrain_negmask) or place_meeting(x,y,obj_trainfriend_mask3) &amp;&amp; !place_meeting(x,y,obj_trainfriend3) &amp;&amp; !place_meeting(x,y,obj_tiltrain_negmask)
//player is in green area but not touching friend
{
    animstart = 1
    
    good = true;
    with(fect_shake_growing_bi){sp = false}
    bad = false
    bad2 = false
    global.stopped = 2
    view_wview[0] *= 0.999
    view_hview[0] *= 0.999
    
    view_xview[0] = room_width/2 - view_wview[0]/2
    view_yview[0] = room_height/2 - view_hview[0]/2
}
else if place_meeting(x,y,obj_trainfriend) or place_meeting(x,y,obj_trainfriend2) or place_meeting(x,y,obj_trainfriend3) or place_meeting(x,y,obj_tiltrain_negmask)
//if player is touching friend
{
    global.stopped = 0
    good = false;
    bad = true;
    bad2 = false
    with(fect_shake_growing_bi){sp = true}
    with(obj_train_colour_tilt2){image_alpha = 0}
}
else // player is outside of green area
{
   //with(obj_train_colour_tilt){image_alpha = 0}
   with(obj_train_colour_tilt2){image_alpha = 0}
   global.stopped = 0
   with(fect_shake_growing_bi){sp = true}
   //goodCount = 0
   //badCount = 0
   good = false;
   bad = false
   bad2 = true;
}

// apply counts
if good == true 
{
    goodCount += 0.033 
    global.movevar = 0
    //with fect_shake_growing_bi {stop = 1}
    if global.stress &gt; (ogStress)
        {
            global.stress -= 0.001
        }
    with(obj_train_colour_tilt2){image_index = 1; image_alpha += 0.0066}
    //ease in camera
    with obj_lightvignette{ image_alpha += 0.1}
    
    view_wview[0] *= 0.9999
    view_hview[0] *= 0.9999
    if !audio_is_playing(sf_themeloopquiet)
    {
        audio_play_sound(sf_themeloopquiet,3,true)
    }
    
    view_xview[0] = room_width/2 - view_wview[0]/2
    view_yview[0] = room_height/2 - view_hview[0]/2
}

else 
{
    
    goodCount = 0 
    with(obj_train_colour_tilt2){image_index = 1; image_alpha = 0}
    view_wview[0] = ogw
    view_hview[0] = ogh
    audio_stop_sound(sf_themeloopquiet)
    //view_xview[0] = ogx
    //view_yview[0] = ogy
    with obj_lightvignette{ image_alpha = 0}
}


if bad == true
{
    badCount += 0.099; 
     global.movevar += 0.05
     global.stopped = 0
     audio_stop_sound(sf_themeloopquiet)
    if global.stress &lt; (ogStress + 0.15)
    {
        global.stress += 0.001
    }
    with(obj_train_colour_tilt) {image_index = 0; image_alpha += 0.0066}
    if animstart = 1
    {
    with obj_trainfriend {image_index = 3}
    with obj_trainfriend3 {image_index = 3}
    with obj_trainfriend2 {image_index = 3}
    }
}
else 
{
    badCount = 0
}

if bad2 == true 
{
    badCount2 += 0.033; 
    global.movevar += 0.05
    global.stopped = 0
    if global.stress &lt; (ogStress + 0.15)
    {
        global.stress += 0.001
    }
       if animstart = 1
    {
    with(obj_train_colour_tilt){image_index = 0; image_alpha += 0.0066}
    with obj_trainfriend {image_index = 3}
    with obj_trainfriend3 {image_index = 3}
    with obj_trainfriend2 {image_index = 3}
    }
}
else 
{
    badCount2 = 0

with(obj_train_colour_tilt){image_index = 0; image_alpha = 0}
global.stress = ogStress;
}


if bad2 == false &amp;&amp; bad == false
{
with fect_shake_growing_bi {stop = 0}
}

//end states
if goodCount &gt;= 3 
{//message = "perfect"
    if !instance_exists(obj_flash)
    {
        instance_create(room_width/2,room_height/2,obj_flash)
        audio_play_sound(sf_chord,10,false)
    }
    with obj_trainfriend {image_index = 5}
    with obj_trainfriend3 {image_index = 5}
    with obj_trainfriend2 {image_index = 5}
    with obj_trainfriend_mask {sprite_index = spr_crashing; image_speed = 0; image_alpha = 0}
    with obj_trainfriend_mask3 {sprite_index = spr_crashing; image_speed = 0; image_alpha = 0}
    with obj_trainfriend_mask2 {sprite_index = spr_crashing; image_speed = 0; image_alpha = 0}
    with obj_tiltrain_negmask {instance_destroy()}
    //sprite_index = spr_tiltplayer_away
    alarm[0] = 30
    global.stop = true;
}
else if goodCount &gt;= 1.5 
{//message = "perfect"
    with obj_trainfriend {image_index = 2}
    with obj_trainfriend3 {image_index = 2}
    with obj_trainfriend2 {image_index = 2}
}
else if goodCount &gt;= 0.5 
{//message = "perfect"
    with obj_trainfriend {image_index = 1}
    with obj_trainfriend3 {image_index = 1}
    with obj_trainfriend2 {image_index = 1}
}
else if goodCount &gt; 0 
{//message = "perfect"
    with obj_trainfriend {image_index = 0}
    with obj_trainfriend3 {image_index = 0}
    with obj_trainfriend2 {image_index = 0}
}
else if badCount &gt;= 3
{//message = "too close!"
image_alpha = 0
if !instance_exists(obj_fall)
{
    instance_create(x,y,obj_fall)
}
instance_destroy(fect_shake_growing_bi)
instance_create(x,y,fect_shake)
//with fect_shake_growing_bi {stop = 0}
with obj_trainfriend {image_alpha = 0}
with obj_trainfriend3 {image_alpha = 0}
with obj_trainfriend2 {image_alpha = 0}
with obj_trainfriend_mask {sprite_index = spr_crashing; image_speed = 0; image_index = 0}
with obj_trainfriend_mask3 {sprite_index = spr_crashing; image_speed = 0; image_index = 2}
with obj_trainfriend_mask2 {sprite_index = spr_crashing; image_speed = 0; image_index = 1}
with obj_tiltrain_negmask {instance_destroy()}
alarm[0] = 30
global.stop = true;}
else if badCount2 &gt;= 3
{//message = "too far!"
if !instance_exists(obj_fallback)
{
    instance_create(x,y,obj_fallback)
}
with fect_shake_growing_bi {stop = 0}
instance_destroy(fect_shake_growing_bi)
instance_create(x,y,fect_shake)
image_alpha = 0
alarm[0] = 30
global.stop = true;}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text_transformed(view_xview + (view_wview[0]/2),view_yview + (view_hview[0]/2),message, 2, 2, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
